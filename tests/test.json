[
    {
        "description": "Test simple command",
        "command": [ "./cmd stdout stderr return 20" ],
        "stdout": ["==", "1"],
        "stderr": ["==", "2"],
        "return_code": ["==", 20]
    },
    {
        "description": "Test a non-existant binary",
        "command": [ "binarydoesntexist" ],
        "stdout": null,
        "stderr": null,
        "return_code": ["!=", 0]
    },
    {
        "description": "Test '/bin/ls %s', '-l'",
        "command": [ "/bin/ls %s", "-l" ],
        "stdout": ["contains", "total "],
        "stderr": null,
        "return_code": ["==", 0]
    },
    {
        "description": "Test 'ls' without absolute path (Check PATH functionality) # TODO",
        "command": [ "ls" ],
        "stdout": null,
        "stderr": null,
        "return_code": ["==", 0]
    },
    {
        "description": "Test format string glob /etc/passw*",
        "fixme": "remove the /bin to be compatible with more systems.",
        "command": [ "/bin/echo /etc/passw*" ],
        "stdout": ["contains", "/etc/passwd"],
        "stderr": null,
        "return_code": ["==", 0]
    },
    {
        "description": "Test format string glob /etc/passw?",
        "fixme": "remove the /bin to be compatible with more systems.",
        "command": [ "/bin/echo /etc/passw?" ],
        "stdout": ["contains", "/etc/passwd"],
        "stderr": null,
        "return_code": ["==", 0]
    },
    {
        "description": "Test glob param '%*p', '/etc/passw?'",
        "fixme": "remove the /bin to be compatible with more systems.",
        "command": [ "/bin/echo %*p", "/etc/passw?" ],
        "stdout": ["contains", "/etc/passwd"],
        "stderr": null,
        "return_code": ["==", 0]
    },
    {
        "description": "Test failed glob param '%*p', '/etc/passw?thisdoesnnotexist'",
        "fixme": "remove the /bin to be compatible with more systems.",
        "command": [ "/bin/echo %*p", "/etc/passw?thisdoesnnotexist" ],
        "stdout": ["==", ""],
        "stderr": ["==", "systemf: no matches found: /etc/passw?thisdoesnnotexist\n"],
        "return_code": ["==", -1]
    },
    {
        "description": "Bad Redirects - (multiple stdin)",
        "command": [ "./cmd true </dev/null </tmp" ],
        "stdout": null,
        "stderr": ["contains", "ERROR: There should only be one stdin per command."],
        "return_code": ["==", -1]
    },
    {
        "description": "Bad Redirects - (multiple stderr)",
        "command": [ "./cmd true 2>&1 2>/dev/null" ],
        "stdout": null,
        "stderr": ["contains", "ERROR: There should only be one stderr per command."],
        "return_code": ["==", -1]
    },
    {
        "description": "Bad Redirects - (multiple stderr 2)",
        "command": [ "./cmd true 2>/dev/null 2>/tmp" ],
        "stdout": null,
        "stderr": ["contains", "ERROR: There should only be one stderr per command."],
        "return_code": ["==", -1]
    },
    {
        "description": "Bad Redirects - (stderr + stdout append + stdout)",
        "command": [ "./cmd true &>>/dev/null >/tmp" ],
        "stdout": null,
        "stderr": ["contains", "ERROR: There should only be one stdout per command."],
        "return_code": ["==", -1]
    },
    {
        "description": "Bad Redirects - (stderr + 2 stdout",
        "command": [ "./cmd true &>/dev/null >/tmp" ],
        "stdout": null,
        "stderr": ["contains", "ERROR: There should only be one stdout per command."],
        "return_code": ["==", -1]
    },
    {
        "description": "Bad Redirects - (stdout append + stdout)",
        "command": [ "./cmd >>/dev/null >/tmp" ],
        "stdout": null,
        "stderr": ["contains", "ERROR: There should only be one stdout per command."],
        "return_code": ["==", -1]
    },
    {
        "description": "redirect '<'",
        "command": [ "./cmd cat < README.md" ],
        "stdout": ["contains", "JSON"],
        "stderr": null,
        "return_code": ["==", 0]
    },
    {
        "description": "redirect '<'",
        "command": [ "./cmd cat < README.md" ],
        "stdout": ["contains", "JSON"],
        "stderr": null,
        "return_code": ["==", 0]
    },
    {
        "description": "pipe '|'",
        "command": [ "./cmd stdout | ./cmd incr | ./cmd incr" ],
        "stdout": ["==", "3"],
        "stderr": null,
        "return_code": ["==", 0],
        "todo1": "| `>>`*file*   | Append the stdout into the specified *file*. (1)(3) |",
        "todo2": "| `2>`*file*   | Redirect the stderr into the specified *file*. (1)(2) |",
        "todo3": "| `2>>`*file*  | Append the stderr into the specified *file*. (1)(3) |",
        "todo4": "| `>&2`        | Redirect the stdout into the stderr. (4) |",
        "todo5": "| `2>&1`       | Redirect stderr into stdout. (4) |",
        "todo6": "| `&>`*file*   | Redirect stderr and stdout into the specified *file*. (1)(2) |",
        "todo7": "| `&>>`*file*  | Append stderr and stdout into the specified *file*. (1)(2) |"
    },
    {
        "description": "redirect '>>'",
        "command": [ "./cmd stdout >> tmp/#.txt && ./cmd stdout >> tmp/#.txt && ./cmd incr < tmp/#.txt" ],
        "stdout": ["==", "12"],
        "stderr": ["==", ""],
        "return_code": ["==", 0]
    }
]
